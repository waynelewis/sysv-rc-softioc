#!/bin/bash

PATH="${PATH}:/usr/sbin"

CONF=/etc/default/epics-softioc

LIBRARY=/usr/share/sysv-rc-softioc/library.sh
INITBASESCRIPT=/usr/share/sysv-rc-softioc/softioc
INITDDIR=/etc/init.d

warn () {
	echo "$1" >&2
}

die () {
	echo "$1" >&2
	exit 1
}

. "$LIBRARY"

usage() {
	printf "Usage: %s [-v] [-x] cmd\n" `basename $0`
	echo "Available commands:"
	echo "  help          - display this message"
	echo "  report [ioc]  - Show config of all/an IOC"
	echo "  status        - Check if IOCs are running"
	echo "  nextport      - Find the next unused procServ port"
	echo "  install <ioc> - Create /etc/init.d/softioc-[ioc]"
	echo "  enable <ioc>  - Register IOC to start during system boot"
	echo "  disable <ioc> - Un-register IOC"
	echo "  startall      - Start all IOCs installed for this system"
	echo "  stopall       - Stop all IOCs installed for this system"
	exit 2
}

#   Print IOC instance config
#
#  BASEDIR  IOCNAME  USER  PORT  HOSTNAME  CMD
#
# $1 - iocdir
reportone() {
	if [ -z "$HEADER" ]; then
		case "$2" in
		conserver) # no header
			;;
		*)
			printf "n%-15s | %-15s | %-15s | %5s | %s\n" BASE IOC USER PORT EXEC
			;;
		esac
		export HEADER=1
	fi
	local IOC="`basename $1`"
	local BASE="`dirname $1`"
	if [ ! -r "$1/config" ]; then
		echo "Missing config $1/config" >&2
		return 1
	fi
	unset EXEC USER HOST
	PORT=0
	local INSTBASE="$1"
	CHDIR="$1"
	. "$1/config"
	USER="${USER:-${IOC}}"
	EXEC="${EXEC:-${INSTBASE}/st.cmd}"
	case "$2" in
	conserver)
		# skip IOC which don't specify a host
		[ -n "$HOST" -a -n "$PORT" ] || continue
		# identify if this is the host system
		[ "$HOST" = "$(hostname -s)" -o "$HOST" = "$(hostname -f)" ] && HOST=localhost || continue
		echo "console $IOC {include softioc; master $HOST; port $PORT;}"
		;;
	all)
		[ -n "$HOST" ] || HOST="<anywhere>"
		printf "%-15s | %-15s | %-15s | %-15s | %5s | %s\n" $BASE $HOST $IOC $USER $PORT $EXEC
		;;
	*)
		[ "$HOST" != "$(hostname -s)" -a "$HOST" != "$(hostname -f)" -a -n "$HOST" ] && return 0
		[ -n "$HOST" ] || HOST="<anywhere>"
		printf "%-15s | %-15s | %-15s | %5s | %s\n" $BASE $IOC $USER $PORT $EXEC
		;;
	esac
}

installioc() {
	IOC="$1"
	BASE="`findbase "$IOC"`"
	[ $? -ne 0 ] && die "Failed to find ioc $IOC"
	echo "Installing IOC $BASE/$IOC"
	SCRIPT="$INITDDIR/softioc-$IOC"
	echo "As $SCRIPT"
	if [ -h "$SCRIPT" ]
	then
		# old-style symlink
		echo "Replacing existing symlink to `readlink "$SCRIPT"`"
		rm -f "$SCRIPT" || die "Failed to remove symlink"
	elif [ -f "$SCRIPT" ] && ! grep 'AUTOMATICALLYGENERATED' "$SCRIPT" &>/dev/null
	then
		# script is a file and isn't automatically managed
		mv --backup=numbered "$SCRIPT" "$SCRIPT".old || die "failed to backup existing script"
		echo "Backing up existing script"
	fi
	cat << EOF > "$SCRIPT"
#!/bin/sh
## Notice
# This file was generated by `basename $0`
# on `date -R`
# If you edit this file then remove the following line
# to prevent automatic updates
## AUTOMATICALLYGENERATED

### BEGIN INIT INFO
# Provides:          softioc-$IOC
# Required-Start:    \$remote_fs \$local_fs \$network \$syslog \$time
# Required-Stop:     \$remote_fs \$local_fs \$network \$syslog
# Should-Start:      \$named slapd autofs ypbind nscd nslcd
# Should-Stop:       \$named slapd autofs ypbind nscd nslcd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: An EPICS Soft IOC
# Description:       Control a single software IOC
# chkconfig: 2345 99 01
# description:       Control a single software IOC
### END INIT INFO

. "$INITBASESCRIPT"
EOF
	[ -f "$SCRIPT" -a -s "$SCRIPT" ] || die "Failed to create $SCRIPT"
	chmod +x "$SCRIPT"
	echo "Complete"
	echo "To add the IOC to the system boot order run:"
	echo " `basename $0` enable $IOC"
}

VERB=

while getopts hvx arg
do
	case $arg in
	v)	VERB=1;;
	x)	set -x;;
	h)	usage;;
	esac
done
shift $(($OPTIND - 1))

iocinit

[ -n "$VERB" ] && echo "Searching in: $IOCPATH"

cmd="$1"
shift

[ -n "$VERB" ] && echo "Command: $cmd"

case "$cmd" in
report)
	visit reportone "$@"
	;;

list)
	visit echo "$1"
	;;

status)
	ls -1 /etc/init.d/softioc-*[^~] | while read ff
	do
		printf "$ff\t\t"
		IOC="`basename "$ff"`"
		if $ff status &>/dev/null
		then
			printf "Running"
		else
			printf "Stopped"
		fi
		if ! ls /etc/rc*.d/*$IOC &>/dev/null
		then
			printf ".  Not registered"
		fi
		printf "\n"
	done
	;;

nextport)
	# Find the highest port in use and add one.
	LAST="`visit reportone "$1" | tail -n '+2' | awk '{print $7}' | sort -n | tail -n1`"
	if [ -n "$LAST" ] && [ "$LAST" -ne 0 ]
	then
		# print next port
		expr "$LAST" '+' 1
	else
		echo 4050
	fi
	;;

install)
	requireroot
	installioc "$1"
	;;

enable)
	requireroot
	[ -z "$1" ] && die "Missing argument"
	echo "Enable: softioc-$1"
	#update-rc.d "softioc-$1" defaults 99
	chkconfig "softioc-$1" on
	;;

disable)
	requireroot
	[ -z "$1" ] && die "Missing argument"
	echo "Disable: softioc-$1"
	#update-rc.d -f "softioc-$1" remove
	chkconfig "softioc-$1" off
	;;

stopall)
	requireroot
	for initfile in /etc/init.d/softioc-*[^~]
	do
		$initfile stop 
	done
	;;

startall)
	requireroot
	for initfile in /etc/init.d/softioc-*[^~]
	do
		$initfile start 
	done
	;;

help)
	usage
	;;
*)
	[ "$cmd" ] && warn "Unknown command '$cmd'"
	usage
	exit 1
	;;
esac
